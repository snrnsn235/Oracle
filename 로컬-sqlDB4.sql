DROP USER SQLDB CASCADE;
CREATE USER SQLDB IDENTIFIED BY 1234
DEFAULT TABLESPACE USERS
TEMPORARY TABLESPACE TEMP;
GRANT CONNECT, RESOURCE, DBA TO SQLDB;

CREATE OR REPLACE FUNCTION GETAGEFUNC(BYEAR NUMBER)
    RETURN NUMBER
    AS V_AGE NUMBER;
    BEGIN
    V_AGE := EXTRACT(YEAR FROM SYSDATE) - BYEAR;
    RETURN V_AGE;
    END GETAGEFUNC;


SELECT GETAGEFUNC(1979) FROM DUAL;

VAR RETVALUE NUMBER;
EXECUTE : RETVALUE := GETAGEFUNC(1979);
PRINT RETVALUE;

SELECT USERID, USERNAME, GETAGEFUNC(BIRTHYEAR) AS "만 나이" FROM USERTBL;

CREATE OR REPLACE FUNCTION BLINDFUNC(USTRING NCHAR)
    RETURN NCHAR
AS
    V_STRING NCHAR(20) := '';
BEGIN
    IF USTRING = '-' THEN -- '-'은 전화번호가 없는 사용자.
        RETURN V_STRING;
    END IF;
    
    IF SUBSTR(USTRING, 1, 1) = '0' THEN --제일 앞이 0이면 전화번호
        V_STRING := CONCAT(SUBSTR(USTRING, 1, 8), '-XXXX');
    ELSE
        V_STRING := CONCAT(SUBSTR(USTRING, 1, 1), '00');
    END IF;
    RETURN V_STRING;
END BLINDFUNC;

SELECT BLINDFUNC(USERNAME) AS "회원",
    BLINDFUNC(MIBILE1 ||'-'|| MOBILE2) AS "연락처" FROM USERTBL;
    
--커서--  
CREATE OR REPLACE PROCEDURE CURSORPROC AS
    V_HEIGHT NUMBER; --회원의 키
    V_CNT NUMBER := 0; --회원의 인원수(=읽은 행의 수)
    V_TOTAL NUMBER := 0; --회원의 키의 합계
    --(1) 커서 선언
    CURSOR USERCURSOR IS
        SELECT HEIGHT FROM USERTBL;
    BEGIN
        --(2) 커서 열기
    OPEN USERCURSOR;
        --(3) 커서에서 데이터 가져오기 및 (4) 데이터 처리
    LOOP
        FETCH USERCURSOR INTO V_HEIGHT;
        EXIT WHEN USERCURSOR%NOTFOUND; --데이터가 없으면 LOOP 종료
        V_TOTAL := V_TOTAL + V_HEIGHT;
        V_CNT := V_CNT +1;
    END LOOP;
    --(5) 커서 닫기
    CLOSE USERCURSOR;
    DBMS_OUTPUT.PUT_LINE('회원 키의 평균 ==>' || (V_TOTAL/V_CNT));
END;
        
SET SERVEROUTPUT ON;
EXECUTE CURSORPROC();


ALTER TABLE USERTBL ADD GRADE NVARCHAR2(5); --회원 등급 열 추가

CREATE OR REPLACE PROCEDURE GRADEPROC AS
    V_ID CHAR(8); -- 회원 아이디
    V_TOTAL NUMBER(5) := 0; -- 총 구매액
    V_GRADE NVARCHAR2(5); -- 회원 등급
    --(1) 커서 선언
    CURSOR USERCURSOR IS
        SELECT U.USERID, SUM(PRICE*AMOUNT)
        FROM BUYTBL B
            RIGHT OUTER JOIN USERTBL U
            ON B.USERID = U.USERID
            GROUP BY U.USERID, U.USERNAME;
   BEGIN
    OPEN USERCURSOR; --(2) 커서 열기
    LOOP --(3) 커서에서 데이터 가져오기 및 (4) 데이터 처리   
        FETCH USERCURSOR INTO V_ID, V_TOTAL;
        EXIT WHEN USERCURSOR%NOTFOUND; --데이터가 없으면 LOOP 종료
        CASE 
        WHEN (V_TOTAL >= 1500) THEN V_GRADE := '최우수회원';
        WHEN (V_TOTAL >= 1000) THEN V_GRADE := '우수회원';
        WHEN (V_TOTAL >= 1) THEN V_GRADE := '일반회원';
        ELSE V_GRADE := '유령회원';
    END CASE;
    UPDATE USERTBL SET GRADE = V_GRADE WHERE USERID = V_ID;
END LOOP;
CLOSE USERCURSOR;--(5) 커서 닫기
END;

EXEC GRADEPROC();
SELECT USERID, USERNAME, GRADE FROM USERTBL;

--함수--
CREATE OR REPLACE FUNCTION GETAGEFUNC(BYEAR NUMBER)
    RETURN NUMBER
    AS
        V_AGE NUMBER;
    BEGIN
        V_AGE := EXTRACT(YEAR FROM SYSDATE) - BYEAR;
        RETURN V_AGE;
    END GETAGEFUNC;

SELECT GETAGEFUNC(1979) FROM DUAL;

CREATE OR REPLACE TYPE TABLEROWTYPE AS OBJECT(UNAME NCHAR(5), BYEAR NUMBER);
CREATE OR REPLACE TYPE TABLETYPE AS TABLE OF tableRowType;

CREATE OR REPLACE FUNCTION TABLERETURNFUNC(NAMESTRING NVARCHAR2, BIRTHSTRING 
NVARCHAR2)
    RETURN TABLETYPE
    PIPELINED
AS
    V_NAMESTRING NVARCHAR2(500) := NAMESTRING;
    V_BIRTHSTRING NVARCHAR2(500) := BIRTHSTRING;
    V_ROWTYPE TABLEROWTYPE; -- 1개 행(이름, 생년)
    V_NAMEIDX NUMBER; -- 이름 문자열에서 추출할 콤마(,)의 현재 위치
    V_BIRTHINDEX NUMBER; --생년 문자열에서 추출할 콤마(,)의 현재 위치
    V_NAME NCHAR(5); --추출한 1개의 이름 문자열
    V_BIRTH NUMBER; --추출한 1개의 생년 숫자
BEGIN
    LOOP
        V_NAMEIDX := INSTR(V_NAMESTRING, ',');
        V_BIRTHINDEX := INSTR(V_BIRTHSTRING, ',');
        IF V_NAMEIDX > 0 AND V_BIRTHINDEX > 0 THEN
            V_NAME := SUBSTR(V_NAMESTRING, 1, V_NAMEIDX-1);
            V_BIRTH := TO_NUMBER(SUBSTR(V_BIRTHSTRING, 1, V_BIRTHINDEX-1));
            V_ROWTYPE := TABLEROWTYPE(V_NAME, V_BIRTH);
            PIPE ROW(V_ROWTYPE);
            V_NAMESTRING := SUBSTR(V_NAMESTRING, V_NAMEIDX+1);
            V_BIRTHSTRING := SUBSTR(V_BIRTHSTRING, V_BIRTHINDEX+1);
        ELSE
            V_ROWTYPE := TABLEROWTYPE(V_NAMESTRING, V_BIRTHSTRING); -- 나머지 값 대입
            PIPE ROW(V_ROWTYPE);
            EXIT;
        END IF;
    END LOOP;
    RETURN;
END TABLERETURNFUNC;

SELECT * FROM TABLE(TABLERETURNFUNC('토마스, 제임스, 고든, 에밀리' , '1990, 1995, 1993, 1999'));